{"version":3,"sources":["components/AccountBalance.js","components/Home.js","components/UserProfile.js","components/Login.js","components/Credits.js","components/Debits.js","App.js","reportWebVitals.js","index.js"],"names":["AccountBalance","this","props","accountBalance","Component","Home","src","alt","to","UserProfile","userName","memberSince","LogIn","handleChange","e","updatedUser","state","user","target","value","setState","handleSubmit","preventDefault","mockLogIn","redirect","password","onSubmit","type","name","defaultValue","onChange","Credits","credits","map","credit","date","slice","amount","description","id","addCredit","placeholder","step","Debits","debits","debit","addDebit","App","event","debitList","length","parseFloat","Date","toISOString","push","updateBalance","console","log","reset","creditList","logInInfo","newUser","currentUser","a","defaultDebits","fetch","fetchedCredits","fetchedDebits","json","jsonCredits","jsonDebits","item","counter","toFixed","basename","exact","path","render","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.c95099a5.chunk.js","sourcesContent":["/*==================================================\nsrc/components/AccountBalance.js\n\nThe AccountBalance component displays account balance. It is included in other page views.\n==================================================*/\nimport React, {Component} from 'react';\n\nclass AccountBalance extends Component {\n  // Display account balance\n  render() {\n    return (\n      <div>\n        Balance: {this.props.accountBalance}\n      </div>\n    );\n  }\n}\n\nexport default AccountBalance;","/*==================================================\nsrc/components/Home.js\n\nThe Home component is used to demonstrate the use of Link.\n==================================================*/\nimport React, {Component} from 'react';\nimport AccountBalance from './AccountBalance';\nimport {Link} from 'react-router-dom';\n\nclass Home extends Component {\n  render() {\n    return (\n      <div>\n        <img src=\"https://picsum.photos/200/200\" alt=\"bank\"/>\n\n        <h1>Bank of React</h1>\n\n        <Link to=\"/userProfile\">User Profile</Link>\n        <br/>\n        <Link to=\"/login\">Login</Link>\n        <br/>\n        <Link to=\"/credits\">Credits</Link>\n        <br/>\n        <Link to=\"/debits\">Debits</Link>\n        <br/><br/>\n        <AccountBalance accountBalance={this.props.accountBalance}/>\n      </div>\n    );\n  }\n}\n\nexport default Home;\n","/*==================================================\nsrc/components/UserProfile.js\n\nThe UserProfile component is used to demonstrate the use of Route and Link.\nNote: You don't need to work on this file for the Assignment.\n==================================================*/\nimport React, {Component} from 'react';\nimport {Link} from 'react-router-dom';\n\nclass UserProfile extends Component {\n  render() {\n    return (\n      <div>\n        <h1>User Profile</h1>\n\n        <div>Username: {this.props.userName}</div>\n        <div>Member Since: {this.props.memberSince}</div>\n        <br/>\n        <Link to=\"/\">Return to Home</Link>\n      </div>\n    );\n  }\n}\n\nexport default UserProfile;","/*==================================================\nsrc/components/Login.js\n\nThe LogIn component is used to demonstrate the use of Redirect.\nNote: You don't need to work on this file for the Assignment.\n==================================================*/\nimport React, { Component } from 'react';\nimport { Redirect } from 'react-router-dom';\nimport {Link} from 'react-router-dom';\n\nclass LogIn extends Component {\n  constructor (props) {  // Create and initialize state\n    super(props)\n    this.state = {\n      user: {\n        //userName: '',\n        userName: this.props.user.userName,  // Initialize userName using props input (currentUser in App.js)\n        password: ''\n      },\n      redirect: false  // Redirect property used to trigger Redirect\n    }\n  }\n\n  // When User Name input is changed, capture the new input value and update state\n  handleChange = (e) => {\n    const updatedUser = {...this.state.user};  // Create an object for state\n    updatedUser.userName = e.target.value;  // Set object's userName to the new input value\n    this.setState({user: updatedUser})  // Update state with object values\n  }\n\n  // When user clicked \"Log In\" button, store user data and then redirect to \"User Profile\" page\n  handleSubmit = (e) => {\n    e.preventDefault()\n    this.props.mockLogIn(this.state.user)  // Update state in the top-level component (App.js)\n    this.setState({redirect: true})  // Update state to trigger Redirect\n  }\n  \n  render () {\n    // Redirect to \"User Profile\" page when \"Log In\" button is clicked\n    if (this.state.redirect) {  \n      return (<Redirect to=\"/userProfile\"/>);\n    }\n\n    // Render the login form (and call \"handleSubmit\" method when \"Log In\" button is clicked to submit form)\n    return (\n      <div>\n        <h1>Login</h1>\n        \n        <form onSubmit={this.handleSubmit}>\n          <div>\n            <label>User Name</label>\n            <input type=\"text\" name=\"userName\" defaultValue={this.props.user.userName} onChange={this.handleChange} />\n          </div>\n          <div>\n            <label>Password</label>\n            <input type=\"password\" name=\"password\" />\n          </div>\n          <button>Log In</button>\n        </form>  \n        <br/>\n        <Link to=\"/\">Return to Home</Link>\n      </div>\n    );\n  }\n}\n\nexport default LogIn;","/*==================================================\nsrc/components/Credits.js\n==================================================*/\n\n// Import Link as well as the balance component\nimport {Link} from 'react-router-dom';\nimport AccountBalance from './AccountBalance';\n\n// Define our credits component\nconst Credits = (props) => {\n  // Create the list of Credit items\n  let creditsView = () => {\n    const { credits } = props;\n    return credits.map((credit) => {  // Extract \"id\", \"amount\", \"description\" and \"date\" properties of each credit JSON array element\n      let date = credit.date.slice(0,10);\n      return <li key={credit.id}>{credit.amount} {credit.description} {date}</li>\n    });\n  }\n\n  // Render the list of Credit items and a form to input new Credit item\n  // We use placeholders in the forms so it is understandable what either\n  // text field is, and a step of 0.01 on the amount so values can only be\n  // multiples of one cent (and thus only two digits after the decimal)\n  return (\n    <div>\n      <h1>Credits</h1>\n\n      {creditsView()}\n\n      <form onSubmit={props.addCredit}>\n        <input type=\"text\" name=\"description\" placeholder=\"Description\" />\n        <input type=\"number\" name=\"amount\" placeholder=\"Amount\" step=\"0.01\" />\n        <button type=\"submit\">Add Credit</button>\n      </form>\n      <br/>\n      <AccountBalance accountBalance={props.accountBalance}/>\n      <br/>\n      <Link to=\"/\">Return to Home</Link>\n    </div>\n  );\n}\n\n// Export our credits component\nexport default Credits;\n","/*==================================================\nsrc/components/Debits.js\n==================================================*/\n\n// Import Link as well as the balance component\nimport {Link} from 'react-router-dom';\nimport AccountBalance from './AccountBalance';\n\n// Define our debits component\nconst Debits = (props) => {\n  // Create the list of Debit items\n  let debitsView = () => {\n    const { debits } = props;\n    return debits.map((debit) => {  // Extract \"id\", \"amount\", \"description\" and \"date\" properties of each debit JSON array element\n      let date = debit.date.slice(0,10);\n      return <li key={debit.id}>{debit.amount} {debit.description} {date}</li>\n    });\n  }\n\n  // Render the list of Debit items and a form to input new Debit item\n  // We use placeholders in the forms so it is understandable what either\n  // text field is, and a step of 0.01 on the amount so values can only be\n  // multiples of one cent (and thus only two digits after the decimal)\n  return (\n    <div>\n      <h1>Debits</h1>\n\n      {debitsView()}\n\n      <form onSubmit={props.addDebit}>\n        <input type=\"text\" name=\"description\" placeholder=\"Description\" />\n        <input type=\"number\" name=\"amount\" placeholder=\"Amount\" step=\"0.01\" />\n        <button type=\"submit\">Add Debit</button>\n      </form>\n      <br/>\n      <AccountBalance accountBalance={props.accountBalance}/>\n      <br/>\n      <Link to=\"/\">Return to Home</Link>\n    </div>\n  );\n}\n\n// Export our debits component\nexport default Debits;\n","/*==================================================\nsrc/App.js\n\nThis is the top-level component of the app.\nIt contains the top-level state.\n==================================================*/\n\n// Import our primary components\nimport React, {Component} from 'react';\nimport {BrowserRouter as Router, Route} from 'react-router-dom';\n\n// Import other components\nimport Home from './components/Home';\nimport UserProfile from './components/UserProfile';\nimport LogIn from './components/Login';\nimport Credits from './components/Credits';\nimport Debits from './components/Debits';\n\n// Define our App component\nclass App extends Component {\n  // Create and initialize state, including creditList, debitList, and accountBalance\n  constructor() {\n    super();\n    this.state = {\n      accountBalance: 0,\n      creditList: [],\n      debitList: [],\n      currentUser: {\n        userName: 'Joe Smith',\n        memberSince: '11/22/99',\n      }\n    };\n  }\n    \n    // When the component (the app itself) is loaded, run this\n    async componentDidMount() {\n        // Set the URL for our default credits/debits json files\n        const defaultCredits = \"https://johnnylaicode.github.io/api/credits.json\"\n        const defaultDebits = \"https://johnnylaicode.github.io/api/debits.json\"\n        \n        // Asynchronously fetch the credits/debits json files\n        const fetchedCredits = await fetch(defaultCredits)\n        const fetchedDebits = await fetch(defaultDebits)\n        \n        // Convert the fetched data, when it is ready, to json/object form\n        const jsonCredits = await fetchedCredits.json()\n        const jsonDebits = await fetchedDebits.json()\n        \n        // Add every credit to our credits list, when they are ready\n        for (let item of await jsonCredits) {\n            this.state.creditList.push(await item)\n        }\n        \n        // Add every debit to our debits list, when they are ready\n        for (let item of await jsonDebits) {\n            this.state.debitList.push(await item)\n        }\n        \n        // Update the account balances based on the imported data\n        this.updateBalance();\n    }\n    \n    // Updates the account balances\n    updateBalance() {\n        // Keep track of our new balance\n        let counter = 0;\n        \n        // For every credit, increment our counter by its amount\n        for (let item of this.state.creditList) {\n            counter += item.amount\n        }\n        \n        // For every debit, decrement our counter by its amount\n        for (let item of this.state.debitList) {\n            counter -= item.amount\n        }\n        \n        // Cut off anything in the counter past two decimal places\n        counter = counter.toFixed(2)\n        \n        // Set the accountBalance to our counter (the balance we just calculated)\n        this.setState({accountBalance: counter})\n    }\n    \n    // Add debits as inputted on the form\n    addDebit = (event) => {\n        // Override default form submission behavior completely (prevents the post-submit refresh)\n        event.preventDefault()\n        \n        // Create a blank debit object\n        let debit = {}\n        \n        // Set all of the properties of our object\n        debit.id = this.state.debitList.length + 1 // IDs start at one here, so increment length of debits\n        debit.amount = parseFloat(event.target[1].value) // We already validated the decimal places before, so just convert string->float and set\n        debit.description = event.target[0].value // Just set this property to the one from the form\n        debit.date = new Date().toISOString() // Get the current date and make it into ISO format\n        \n        // Add this new object to our debits list\n        this.state.debitList.push(debit)\n        \n        // Update the balance state across all pages\n        this.updateBalance();\n        \n        console.log(this.state.debitList)\n        \n        // Clear the form (since we overrode the default post-submit refresh which also does this)\n        event.target.reset()\n    }\n    \n    // Add credits as inputted on the form\n    addCredit = (event) => {\n        // Override default form submission behavior completely (prevents the post-submit refresh)\n        event.preventDefault()\n        \n        // Create a blank credit object\n        let credit = {}\n        \n        // Set all of the properties of our object\n        credit.id = this.state.creditList.length + 1 // IDs start at one here, so increment length of credits\n        credit.amount = parseFloat(event.target[1].value) // We already validated the decimal places before, so just convert string->float and set\n        credit.description = event.target[0].value // Just set this property to the one from the form\n        credit.date = new Date().toISOString() // Get the current date and make it into ISO format\n        \n        // Add this new object to our credits list\n        this.state.creditList.push(credit)\n        \n        console.log(this.state.creditList)\n        \n        // Update the balance state across all pages\n        this.updateBalance();\n        \n        // Clear the form (since we overrode the default post-submit refresh which also does this)\n        event.target.reset()\n    }\n\n  // Update state's currentUser (userName) after \"Log In\" button is clicked\n  mockLogIn = (logInInfo) => {\n    const newUser = {...this.state.currentUser};\n    newUser.userName = logInInfo.userName;\n    this.setState({currentUser: newUser})\n  }\n\n  // Create Routes and React elements to be rendered using React components\n  render() {\n    // Create React elements and pass input props to components\n    const HomeComponent = () => (<Home accountBalance={this.state.accountBalance} />)\n    const UserProfileComponent = () => (\n      <UserProfile userName={this.state.currentUser.userName} memberSince={this.state.currentUser.memberSince} />\n    )\n    const LogInComponent = () => (<LogIn user={this.state.currentUser} mockLogIn={this.mockLogIn} />)\n      \n    // For Credits and Debits, pass the account balance (to display at the bottom) and respective lists & functions (to display and modify)\n    const CreditsComponent = () => (<Credits credits={this.state.creditList} addCredit={this.addCredit} accountBalance={this.state.accountBalance}/>)\n    const DebitsComponent = () => (<Debits debits={this.state.debitList} addDebit={this.addDebit} accountBalance={this.state.accountBalance}/>)\n\n    // Important: Include the \"basename\" in Router, which is needed for deploying the React app to GitHub Pages\n    return (\n      <Router basename=\"/webdev-bank\">\n        <div>\n          <Route exact path=\"/\" render={HomeComponent}/>\n          <Route exact path=\"/userProfile\" render={UserProfileComponent}/>\n          <Route exact path=\"/login\" render={LogInComponent}/>\n          <Route exact path=\"/credits\" render={CreditsComponent}/>\n          <Route exact path=\"/debits\" render={DebitsComponent}/>\n        </div>\n      </Router>\n    );\n  }\n}\n\n// Export our App component\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","/*==================================================\nsrc/index.js\n\nThis file renders the top-level component App which contains all components of the app).\n==================================================*/\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n// Note: In above, StrictMode is a tool for highlighting potential problems in an application. \n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}